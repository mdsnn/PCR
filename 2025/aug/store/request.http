# Laravel Authentication API Test Requests
# Use this file with REST Client extension in VS Code or similar tools

### Variables
@baseUrl = http://localhost:8000/api
@contentType = application/json
@token = {{login.response.body.token}}

### Health Check (Optional - if you have a health endpoint)
GET {{baseUrl}}/health
Accept: application/json

###

### 1. Register New User
# @name register
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123"
}

###

### 2. Register User with Validation Errors (Test validation)
# @name registerError
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "",
  "email": "invalid-email",
  "password": "123"
}

###

### 3. Login with Valid Credentials
# @name login
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "john@example.com",
  "password": "password123"
}

###

### 4. Login with Invalid Credentials
# @name loginError
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "john@example.com",
  "password": "wrongpassword"
}

###

### 5. Login with Missing Fields
# @name loginMissingFields
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "",
  "password": ""
}

###

### 6. Get Authenticated User (Protected Route)
# @name getUser
GET {{baseUrl}}/user
Authorization: Bearer {{token}}
Accept: application/json

###

### 7. Get User Without Token (Should fail)
# @name getUserNoAuth
GET {{baseUrl}}/user
Accept: application/json

###

### 8. Get User with Invalid Token (Should fail)
# @name getUserInvalidAuth
GET {{baseUrl}}/user
Authorization: Bearer invalid-token-here
Accept: application/json

###

### 9. Logout (Protected Route)
# @name logout
POST {{baseUrl}}/logout
Authorization: Bearer {{token}}
Content-Type: {{contentType}}
Accept: application/json

###

### 10. Logout Without Token (Should fail)
# @name logoutNoAuth
POST {{baseUrl}}/logout
Content-Type: {{contentType}}
Accept: application/json

###

### 11. Try to Access Protected Route After Logout (Should fail)
# @name userAfterLogout
GET {{baseUrl}}/user
Authorization: Bearer {{token}}
Accept: application/json

###

### Advanced Test Cases

### 12. Register User with Existing Email (Should fail)
# @name registerDuplicate
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "Jane Doe",
  "email": "john@example.com",
  "password": "password123"
}

###

### 13. Login with Different User
# @name loginUser2
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "Jane Smith",
  "email": "jane@example.com",
  "password": "password456"
}

###

### 14. Login Jane Smith
# @name loginJane
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "jane@example.com",
  "password": "password456"
}

###

### 15. Test CORS (if applicable)
OPTIONS {{baseUrl}}/login
Origin: http://localhost:3000
Access-Control-Request-Method: POST
Access-Control-Request-Headers: Content-Type, Authorization

###

### 16. Test Rate Limiting (Send multiple requests quickly)
# @name rateLimitTest1
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

###

# @name rateLimitTest2
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

###

# @name rateLimitTest3
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "test@example.com",
  "password": "wrongpassword"
}

###

### 17. Test Long Password (Edge case)
# @name longPassword
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "Test User",
  "email": "testlong@example.com",
  "password": "thisisaverylongpasswordtotestvalidationandlimits123456789"
}

###

### 18. Test Special Characters in Name
# @name specialChars
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "José María O'Connor-Smith",
  "email": "jose@example.com",
  "password": "password123"
}

###

### 19. Test Email Case Sensitivity
# @name emailCase
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "JOHN@EXAMPLE.COM",
  "password": "password123"
}

###

### 20. Test SQL Injection Attempt (Should be safe)
# @name sqlInjection
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "admin'; DROP TABLE users; --",
  "password": "password"
}

###

### Manual Token Test (Replace with actual token)
### 21. Test with Manual Token
# @name manualToken
GET {{baseUrl}}/user
Authorization: Bearer 1|abcdefghijklmnopqrstuvwxyz1234567890
Accept: application/json

###

### Batch Operations (if you implement them later)

### 22. Test JSON Structure Response
# @name jsonStructure
POST {{baseUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "john@example.com",
  "password": "password123"
}

# Expected Response Structure:
# {
#   "user": {
#     "id": 1,
#     "name": "John Doe",
#     "email": "john@example.com",
#     "email_verified_at": null,
#     "created_at": "2024-01-01T00:00:00.000000Z",
#     "updated_at": "2024-01-01T00:00:00.000000Z"
#   },
#   "token": "1|randomtokenstring"
# }

###

### Environment-specific requests

### Development Environment
@devUrl = http://localhost:8000/api

### Staging Environment
@stagingUrl = https://your-staging-api.com/api

### Production Environment (be careful!)
@prodUrl = https://your-production-api.com/api

### Test against different environments
### 23. Development Login
POST {{devUrl}}/login
Content-Type: {{contentType}}
Accept: application/json

{
  "email": "john@example.com",
  "password": "password123"
}

###

### 24. Check Laravel Sanctum Cookie (if using SPA authentication)
GET {{baseUrl}}/sanctum/csrf-cookie
Accept: application/json

###

### 25. Test Password Reset (if implemented)
# POST {{baseUrl}}/password/email
# Content-Type: {{contentType}}
# Accept: application/json
#
# {
#   "email": "john@example.com"
# }

###

### 26. Test Email Verification (if implemented)
# POST {{baseUrl}}/email/verification-notification
# Authorization: Bearer {{token}}
# Content-Type: {{contentType}}
# Accept: application/json

###

### Performance Testing
### 27. Concurrent User Registration Test
# @name concurrent1
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "User 1",
  "email": "user1@example.com",
  "password": "password123"
}

###

# @name concurrent2
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "User 2",
  "email": "user2@example.com",
  "password": "password123"
}

###

# @name concurrent3
POST {{baseUrl}}/register
Content-Type: {{contentType}}
Accept: application/json

{
  "name": "User 3",
  "email": "user3@example.com",
  "password": "password123"
}

###

### Cleanup (Delete test users if you have delete endpoint)
# DELETE {{baseUrl}}/user
# Authorization: Bearer {{token}}
# Accept: application/json

###
